I"î;<p>Nowadays itâ€™s almost mandatory to use TDD in every new piece of software in
order to avoid creating <strong><a href="https://en.wikipedia.org/wiki/Legacy_code" target="_blank">legacy</a></strong> code.</p>

<p>There are many tools available to create unit tests in JavaScript and ReactJS.</p>

<p>In this post we will be using <strong><a href="https://facebook.github.io/jest/" target="_blank">jest</a></strong>
and <strong><a href="http://airbnb.io/enzyme/" target="_blank">enzyme</a></strong> to create a simple React Component
using Test-driven Development.</p>

<!--excerpt_end-->
<p><img src="/assets/images/react.jpg" alt="Required" /></p>

<p>This example was created using the following versions:</p>

<figure class="highlight"><pre><code class="language-javascript" data-lang="javascript"><span class="p">{</span>
  <span class="dl">"</span><span class="s2">react</span><span class="dl">"</span><span class="p">:</span> <span class="dl">"</span><span class="s2">15.4.0</span><span class="dl">"</span><span class="p">,</span>
  <span class="dl">"</span><span class="s2">react-dom</span><span class="dl">"</span><span class="p">:</span> <span class="dl">"</span><span class="s2">^15.6.1</span><span class="dl">"</span><span class="p">,</span>
  <span class="dl">"</span><span class="s2">enzyme</span><span class="dl">"</span><span class="p">:</span> <span class="dl">"</span><span class="s2">^2.9.1</span><span class="dl">"</span><span class="p">,</span>
  <span class="dl">"</span><span class="s2">jest</span><span class="dl">"</span><span class="p">:</span> <span class="dl">"</span><span class="s2">^21.0.1</span><span class="dl">"</span>
<span class="p">}</span></code></pre></figure>

<p>The first step is to create a failing test that will try to render a React
Component using the <code class="language-plaintext highlighter-rouge">shallow</code> function from <code class="language-plaintext highlighter-rouge">enzyme</code>.</p>

<p><span style="color:red">Red</span></p>

<figure class="highlight"><pre><code class="language-javascript" data-lang="javascript"><span class="c1">// MyComponent.test.js</span>
<span class="k">import</span> <span class="p">{</span> <span class="nx">shallow</span> <span class="p">}</span> <span class="k">from</span> <span class="dl">'</span><span class="s1">enzyme</span><span class="dl">'</span><span class="p">;</span>
<span class="nx">describe</span><span class="p">(</span><span class="dl">"</span><span class="s2">MyComponent</span><span class="dl">"</span><span class="p">,</span> <span class="p">()</span> <span class="o">=&gt;</span> <span class="p">{</span>
  <span class="nx">it</span><span class="p">(</span><span class="dl">"</span><span class="s2">should render my component</span><span class="dl">"</span><span class="p">,</span> <span class="p">()</span> <span class="o">=&gt;</span> <span class="p">{</span>
    <span class="kd">const</span> <span class="nx">wrapper</span> <span class="o">=</span> <span class="nx">shallow</span><span class="p">(</span><span class="o">&lt;</span><span class="nx">MyComponent</span><span class="o">/&gt;</span><span class="p">);</span>
  <span class="p">});</span>
<span class="p">});</span></code></pre></figure>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>Should render component
   ReferenceError: MyComponent is not defined
</code></pre></div></div>

<p><span style="color:green">Green</span></p>

<figure class="highlight"><pre><code class="language-javascript" data-lang="javascript"><span class="c1">// MyComponent.js</span>
<span class="kd">class</span> <span class="nx">MyComponent</span> <span class="kd">extends</span> <span class="nx">React</span><span class="p">.</span><span class="nx">Component</span> <span class="p">{</span>
  <span class="nx">render</span><span class="p">()</span> <span class="p">{</span>
    <span class="k">return</span> <span class="o">&lt;</span><span class="nx">div</span> <span class="o">/&gt;</span><span class="p">;</span>
  <span class="p">}</span>
<span class="p">}</span>
<span class="k">export</span> <span class="k">default</span> <span class="nx">MyComponent</span><span class="p">;</span></code></pre></figure>

<p>Enzyme creates a <code class="language-plaintext highlighter-rouge">snapshot</code> which represents how the component is being rendered.
We can add a component as child by changing this snapshot first and then
asserting it by using the method <code class="language-plaintext highlighter-rouge">toMatchSnapshot()</code>.</p>

<p><span style="color:red">Red</span></p>

<figure class="highlight"><pre><code class="language-javascript" data-lang="javascript"><span class="c1">// MyComponent.test.js.snap</span>
<span class="nx">exports</span><span class="p">[</span><span class="s2">`MyComponent should render initial layout 1`</span><span class="p">]</span> <span class="o">=</span> <span class="s2">`
Array [
  &lt;MyForm /&gt;,
]
`</span><span class="p">;</span></code></pre></figure>

<figure class="highlight"><pre><code class="language-javascript" data-lang="javascript"><span class="c1">// MyComponent.test.js</span>
<span class="nx">it</span><span class="p">(</span><span class="dl">"</span><span class="s2">should render initial layout</span><span class="dl">"</span><span class="p">,</span> <span class="p">()</span> <span class="o">=&gt;</span> <span class="p">{</span>
  <span class="c1">// when</span>
  <span class="kd">const</span> <span class="nx">wrapper</span> <span class="o">=</span> <span class="nx">shallow</span><span class="p">(</span><span class="o">&lt;</span><span class="nx">MyComponent</span><span class="o">/&gt;</span><span class="p">);</span>
  <span class="c1">// then</span>
  <span class="nx">expect</span><span class="p">(</span><span class="nx">wrapper</span><span class="p">.</span><span class="nx">find</span><span class="p">(</span><span class="dl">'</span><span class="s1">div</span><span class="dl">'</span><span class="p">).</span><span class="nx">children</span><span class="p">().</span><span class="nx">nodes</span><span class="p">).</span><span class="nx">toMatchSnapshot</span><span class="p">();</span>
<span class="p">});</span></code></pre></figure>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>Should render initial layout
   expect(value).toMatchSnapshot()
   Received value does not match stored snapshot 1.
</code></pre></div></div>

<p><span style="color:green">Green</span></p>

<figure class="highlight"><pre><code class="language-javascript" data-lang="javascript"><span class="c1">// MyComponent.js</span>
<span class="kd">class</span> <span class="nx">MyComponent</span> <span class="kd">extends</span> <span class="nx">React</span><span class="p">.</span><span class="nx">Component</span> <span class="p">{</span>
  <span class="nx">render</span><span class="p">()</span> <span class="p">{</span>
    <span class="k">return</span> <span class="o">&lt;</span><span class="nx">div</span><span class="o">&gt;</span>
      <span class="o">&lt;</span><span class="nx">MyForm</span> <span class="o">/&gt;</span>
    <span class="o">&lt;</span><span class="sr">/div&gt;</span><span class="err">;
</span>  <span class="p">}</span>
<span class="p">}</span>
<span class="k">export</span> <span class="k">default</span> <span class="nx">MyComponent</span><span class="p">;</span></code></pre></figure>

<p>We can then pass a function to the child component as a prop. We first change
the snapshot to make the test fail. After that, we add the prop in <code class="language-plaintext highlighter-rouge">&lt;MyForm&gt;</code>.</p>

<p><span style="color:red">Red</span></p>

<figure class="highlight"><pre><code class="language-javascript" data-lang="javascript"><span class="c1">// MyComponent.test.js</span>
<span class="nx">exports</span><span class="p">[</span><span class="s2">`MyComponent should render initial layout 1`</span><span class="p">]</span> <span class="o">=</span> <span class="s2">`
Array [
  &lt;MyForm
    onChange={[Function]}
  /&gt;,
]
`</span><span class="p">;</span></code></pre></figure>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>expect(value).toMatchSnapshot()
 Received value does not match stored snapshot 1.
</code></pre></div></div>
<p><span style="color:green">Green</span></p>

<figure class="highlight"><pre><code class="language-javascript" data-lang="javascript"><span class="c1">// MyComponent.js</span>
<span class="kd">class</span> <span class="nx">MyComponent</span> <span class="kd">extends</span> <span class="nx">React</span><span class="p">.</span><span class="nx">Component</span> <span class="p">{</span>
  <span class="nx">render</span><span class="p">()</span> <span class="p">{</span>
    <span class="k">return</span> <span class="p">(</span>
    <span class="o">&lt;</span><span class="nx">div</span><span class="o">&gt;</span>
     <span class="o">&lt;</span><span class="nx">MyForm</span>
      <span class="nx">onChange</span><span class="o">=</span><span class="p">{()</span> <span class="o">=&gt;</span> <span class="p">{}}</span> <span class="sr">/</span><span class="err">&gt;
</span>    <span class="o">&lt;</span><span class="sr">/div</span><span class="err">&gt;
</span>  <span class="p">);</span>
  <span class="p">}</span>
<span class="p">}</span>
<span class="k">export</span> <span class="k">default</span> <span class="nx">MyComponent</span><span class="p">;</span></code></pre></figure>

<p>Then, we make sure that the method <code class="language-plaintext highlighter-rouge">updateState</code> is executed after the
function <code class="language-plaintext highlighter-rouge">onChange</code> its called in the child.</p>

<p><span style="color:red">Red</span></p>

<figure class="highlight"><pre><code class="language-javascript" data-lang="javascript"><span class="c1">// MyComponent.test.js</span>
<span class="nx">it</span><span class="p">(</span><span class="dl">"</span><span class="s2">should execute function passed to form</span><span class="dl">"</span><span class="p">,</span> <span class="p">()</span> <span class="o">=&gt;</span> <span class="p">{</span>
  <span class="c1">// given</span>
  <span class="nx">jest</span><span class="p">.</span><span class="nx">spyOn</span><span class="p">(</span><span class="nx">MyComponent</span><span class="p">.</span><span class="nx">prototype</span><span class="p">,</span> <span class="dl">'</span><span class="s1">updateState</span><span class="dl">'</span><span class="p">);</span>
  <span class="kd">const</span> <span class="nx">form</span> <span class="o">=</span> <span class="nx">shallow</span><span class="p">(</span><span class="o">&lt;</span><span class="nx">MyComponent</span> <span class="o">/&gt;</span><span class="p">).</span><span class="nx">find</span><span class="p">(</span><span class="dl">'</span><span class="s1">MyForm</span><span class="dl">'</span><span class="p">);</span>
  <span class="c1">// when</span>
  <span class="nx">form</span><span class="p">.</span><span class="nx">props</span><span class="p">().</span><span class="nx">onChange</span><span class="p">();</span>
  <span class="c1">// then</span>
  <span class="nx">expect</span><span class="p">(</span><span class="nx">MyComponent</span><span class="p">.</span><span class="nx">prototype</span><span class="p">.</span><span class="nx">updateState</span><span class="p">).</span><span class="nx">toHaveBeenCalled</span><span class="p">();</span>
<span class="p">});</span></code></pre></figure>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>TypeError: Cannot read property _isMockFunction_ of undefined
</code></pre></div></div>
<p>This indicates that we need to add the <code class="language-plaintext highlighter-rouge">updateState</code> method to the component.</p>

<p><span style="color:green">Green</span></p>

<figure class="highlight"><pre><code class="language-javascript" data-lang="javascript"><span class="c1">// MyComponent.js</span>
<span class="kd">class</span> <span class="nx">MyComponent</span> <span class="kd">extends</span> <span class="nx">React</span><span class="p">.</span><span class="nx">Component</span> <span class="p">{</span>
  <span class="nx">updateState</span><span class="p">()</span> <span class="p">{</span> <span class="c1">// &lt;-- new method</span>
  <span class="p">}</span>
  <span class="nx">render</span><span class="p">()</span> <span class="p">{</span>
    <span class="k">return</span> <span class="p">(</span>
    <span class="o">&lt;</span><span class="nx">div</span><span class="o">&gt;</span>
     <span class="o">&lt;</span><span class="nx">MyForm</span>
      <span class="nx">onChange</span><span class="o">=</span><span class="p">{()</span> <span class="o">=&gt;</span> <span class="p">{}}</span> <span class="sr">/</span><span class="err">&gt;
</span>    <span class="o">&lt;</span><span class="sr">/div</span><span class="err">&gt;
</span>  <span class="p">);</span>
  <span class="p">}</span>
<span class="p">}</span>
<span class="k">export</span> <span class="k">default</span> <span class="nx">MyComponent</span><span class="p">;</span></code></pre></figure>

<p>After executing the same test again we get a new error indicating that the function
didnâ€™t get called. We make it pass by passing this function to the child.</p>

<p><span style="color:red">Red</span></p>
<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>expect(jest.fn()).toHaveBeenCalled()
Expected mock function to have been called.
</code></pre></div></div>
<p><span style="color:green">Green</span></p>

<figure class="highlight"><pre><code class="language-javascript" data-lang="javascript"><span class="c1">// MyComponent.js</span>
<span class="kd">class</span> <span class="nx">MyComponent</span> <span class="kd">extends</span> <span class="nx">React</span><span class="p">.</span><span class="nx">Component</span> <span class="p">{</span>
  <span class="nx">updateState</span><span class="p">()</span> <span class="p">{</span>
  <span class="p">}</span>
  <span class="nx">render</span><span class="p">()</span> <span class="p">{</span>
    <span class="k">return</span> <span class="p">(</span>
    <span class="o">&lt;</span><span class="nx">div</span><span class="o">&gt;</span>
     <span class="o">&lt;</span><span class="nx">MyForm</span>
      <span class="nx">onChange</span><span class="o">=</span><span class="p">{</span><span class="k">this</span><span class="p">.</span><span class="nx">updateState</span><span class="p">}</span> <span class="sr">/</span><span class="err">&gt;
</span>    <span class="o">&lt;</span><span class="sr">/div</span><span class="err">&gt;
</span>  <span class="p">);</span>
  <span class="p">}</span>
<span class="p">}</span>
<span class="k">export</span> <span class="k">default</span> <span class="nx">MyComponent</span><span class="p">;</span></code></pre></figure>

<p>We now have a simple React Component created using pure TDD.</p>

<p>This process may seems slow at the beginning.
However, we gain a lot more in the long run.</p>

<p>TDD allows us to create well founded software that speeds up the maintenance
process and reduce its cost.</p>
:ET