<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Alonso Ayala</title>
    <description></description>
    <link>http://example.com/</link>
    <atom:link href="http://example.com/feed.xml" rel="self" type="application/rss+xml"/>
    <pubDate>Sat, 27 Aug 2016 15:40:48 -0500</pubDate>
    <lastBuildDate>Sat, 27 Aug 2016 15:40:48 -0500</lastBuildDate>
    <generator>Jekyll v3.2.1</generator>
    
      <item>
        <title>Test-driven specifications</title>
        <description>&lt;p&gt;We write code for fun. But we also write code to solve a problem based 
on provided requirements. Behind every new feature, there is a 
requirement or specification that our code must met.&lt;/p&gt;

&lt;p&gt;How can we verify if our code is really meeting those specifications?&lt;/p&gt;

&lt;p&gt;There are several techniques to solve this. Companies usually have demo 
meetings with the people who created the specifications so that they can 
provide feedback and approve the solution. This demonstration is simply 
a bunch of assertions to validate that the new code works as intended.&lt;/p&gt;

&lt;p&gt;What if a new functionality is affecting an old feature that was already 
working? Do we need to call a new meeting again to verify the old feature? 
What do companies do about it?&lt;/p&gt;

&lt;p&gt;It seems that companies try to solve this by creating specialized teams 
for solving defects and running regression tests.&lt;/p&gt;

&lt;p&gt;Nowadays many software teams are striving to improve this process by 
creating automated functional tests which are often included at the end 
of the code development phase or whenever a bug is found.&lt;/p&gt;

&lt;p&gt;These automated tests describe the specifications of the system. 
They specify how the system should behave.&lt;/p&gt;

&lt;p&gt;The problem with this approach is that we end up having specifications 
defined in two different places. One from the business requirements 
provider and the other from the functional tests team. 
The specifications from these two places need often to be synchronized 
to avoid misunderstandings.&lt;/p&gt;

&lt;p&gt;Teams end up not knowing who is telling the truth. They don’t know 
whether the business requirements have the right specifications or if 
the functional tests do. They often agree on consider the production 
code as the source of truth.&lt;/p&gt;

&lt;p&gt;Wouldn’t it be better if we write the business requirements and 
automated tests at the same time? By doing this, we could avoid many 
problems and confusions about the specifications when adding a new 
feature to the system.&lt;/p&gt;

&lt;p&gt;We also could write our code confidently and verify it any time to see 
if our solution is meeting the specifications. We wouldn’t have to wait 
at the end of the iteration to validate if we are doing the right thing 
or if we are impacting another feature that we shouldn’t be affecting.&lt;/p&gt;

&lt;p&gt;People who create and define business requirements are often not 
familiar with code writing. However, it wouldn’t be difficult to create 
a team that could translate those requirements into automated functional 
tests. Teams could even create tools to automate this task.&lt;/p&gt;

&lt;p&gt;Test-driven development specifies that we need to create a test before 
creating any production code. This sounds like we need to create the 
specification before creating the new functionality. There are new 
concepts like Behavior-driven development which propose to consider 
the specifications as a ubiquitous language and the use of tools to 
automate the specification verification process.&lt;/p&gt;

&lt;p&gt;We could take this further and provide specifications for every new 
piece of code we create. We could do this for each class and each method. 
Maybe someday we could stop consider tests as a QA tool and start 
consider them as a specifications definition strategy.&lt;/p&gt;
</description>
        <pubDate>Mon, 20 Jun 2016 20:00:56 -0500</pubDate>
        <link>http://example.com/post/2016/06/20/tdspecs.html</link>
        <guid isPermaLink="true">http://example.com/post/2016/06/20/tdspecs.html</guid>
        
        
        <category>post</category>
        
      </item>
    
      <item>
        <title>I don't want to write unit tests</title>
        <description>&lt;p&gt;Have you ever felt that good sensation when you fix duplicate code?&lt;/p&gt;

&lt;p&gt;I am sure you have felt that satisfaction when you know that you did 
the right thing and you know that everybody is going to be happy and 
will see the great developer you are.&lt;/p&gt;

&lt;p&gt;Have you ever felt the same satisfaction when you create a unit test? 
Probably not.&lt;/p&gt;

&lt;p&gt;Why don’t we feel the same satisfaction given that the creation of the 
unit test is probably more important that elimination duplicate code?&lt;/p&gt;

&lt;p&gt;Maybe you think that fixing duplicate code is much more important than 
the creation of a unit test. And even more important when we know that 
the method is already working. You also may think that this process is 
tedious and a waste of time even though we know it’s important. 
But, what’s the reason for that?&lt;/p&gt;

&lt;p&gt;The reason could be that refactoring is something we can feel proud 
about, something we can show to our team, and is something that makes 
us feel good when our team leader learns of this great achievement.&lt;/p&gt;

&lt;p&gt;Creating a unit test is not something you can feel proud about. It’s 
not something you can brag about to your teammates or something that 
makes your team leader proud of you.&lt;/p&gt;

&lt;p&gt;Maybe this is because most of the time the execution of this unit test 
is hidden until you or some other developer breaks it. One of the uses 
for a unit test is the ease of refactoring tasks, which by the way, 
sometimes these are not wanted because they also are a “waste of time”. 
There are more software bugs related to a missing unit test than to a 
missing refactoring.&lt;/p&gt;

&lt;p&gt;We first need a well unit test suite before doing a bug-free refactor. 
This could mean that unit tests could be even more important that 
refactoring.&lt;/p&gt;

&lt;p&gt;Unit and functional tests are the specifications and design of our 
system. We cannot develop a system without requirements, thus, unit 
and functional tests are more important than our production code. 
Designing a system is an engineering task. Developing the production 
code is a technical task.&lt;/p&gt;

&lt;p&gt;Unit and functional tests represent the description of our system, 
they tell us what the system does, how we can use it and what the 
business rules and use cases are. Why do we hate them so much and try to 
avoid them?&lt;/p&gt;

&lt;p&gt;Software companies see tests as a quality control tool which process is 
executed at the end of the SDLC. This tests should be defined before 
start the code development and they should be executed every time the 
system is built or compiled.&lt;/p&gt;

&lt;p&gt;Let’s give unit tests the place they deserve in our code, which is the 
base for requirements and the description of our system.&lt;/p&gt;
</description>
        <pubDate>Sat, 04 Jun 2016 18:00:56 -0500</pubDate>
        <link>http://example.com/post/2016/06/04/i-don-t-want-to-write-unit-tests.html</link>
        <guid isPermaLink="true">http://example.com/post/2016/06/04/i-don-t-want-to-write-unit-tests.html</guid>
        
        
        <category>post</category>
        
      </item>
    
  </channel>
</rss>
